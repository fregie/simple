syntax = "proto3";
package simple;

import "google/api/annotations.proto";
import "proto/simple-interface/interface.proto";

option go_package = "github.com/fregie/simple/proto/api";

service SimpleAPI {
  rpc CreateSession (CreateSessionReq) returns (CreateSessionRsp){
    option (google.api.http) = {
      post: "/v1/session"
      body: "*"
    };
  };
  rpc GetAllSessions (GetAllSessionsReq) returns (GetAllSessionsRsp){
    option (google.api.http) = {
      get: "/v1/session"
    };
  };
  rpc GetSession(GetSessionReq) returns(GetSessionRsp){
    option (google.api.http) = {
      get: "/v1/session/{IDorName}"
    };
  }
  rpc DeleteSession (DeleteSessionReq) returns (DeleteSessionRsp){
    option (google.api.http) = {
      delete: "/v1/session/{IDorName}"
    };
  };
  rpc GetProtos (GetProtosReq) returns (GetProtosRsp){
    option (google.api.http) = {
      get: "/v1/proto"
    };
  };
  rpc GetSchema (GetSchemaReq) returns (GetSchemaRsp){
    option (google.api.http) = {
      get: "/v1/schema"
    };
  };
}

message CreateSessionReq {
  string Proto = 1;
  interface.ConfigType ConfigType = 2;
  interface.Option Opt = 3;
  string CustomOpt = 4;
  string Name = 5;
}
message CreateSessionRsp {
  Code Code = 1;
  string Msg = 2;
  string ID = 3;
  string Proto = 4;
  interface.ConfigType ConfigType = 5;
  string Config = 6;
}

message Session {
  string ID = 1;
  string Proto =2;
  interface.ConfigType ConfigType = 3;
  string Config = 4;
  interface.Option Opt = 5;
  string Name = 6;
}

message GetAllSessionsReq {}
message GetAllSessionsRsp {
  Code Code = 1;
  string Msg = 2;
  repeated Session Sessions = 3;
}

message GetSessionReq {
  string IDorName = 1;
}
message GetSessionRsp {
  Code Code = 1;
  string Msg = 2;
  Session Session = 3;
}

message DeleteSessionReq {
  string IDorName = 1;
}
message DeleteSessionRsp {
  Code Code = 1;
  string Msg = 2;
}

message GetProtosReq {}
message GetProtosRsp {
  Code Code = 1;
  string Msg = 2;
  repeated string Protos = 3;
}

message Schema {
  string Proto = 1;
  repeated interface.Field Fields = 2;
}

message GetSchemaReq {}
message GetSchemaRsp {
  Code Code = 1;
  string Msg = 2;
  map<string, Schema> Schemas = 3;
}

enum Code {
  OK = 0;                  // 请求成功

  InternalError = 10005;
}