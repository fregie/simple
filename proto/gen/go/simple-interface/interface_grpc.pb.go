// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package simple_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterfaceClient is the client API for Interface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceClient interface {
	Name(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameRsp, error)
	IsSupportPersistence(ctx context.Context, in *IsSupportPersistenceReq, opts ...grpc.CallOption) (*IsSupportPersistenceRsp, error)
	CustomOptionSchema(ctx context.Context, in *CustomOptionSchemaReq, opts ...grpc.CallOption) (*CustomOptionSchemaRsp, error)
	SetMetadata(ctx context.Context, in *SetMetadataReq, opts ...grpc.CallOption) (*SetMetadataRsp, error)
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRsp, error)
	CreateByConfig(ctx context.Context, in *CreateByConfigReq, opts ...grpc.CallOption) (*CreateByConfigRsp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRsp, error)
	GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*GetAllRsp, error)
	UpdateOption(ctx context.Context, in *UpdateOptionReq, opts ...grpc.CallOption) (*UpdateOptionRsp, error)
	GetStat(ctx context.Context, in *GetStatReq, opts ...grpc.CallOption) (*GetStatRsp, error)
}

type interfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceClient(cc grpc.ClientConnInterface) InterfaceClient {
	return &interfaceClient{cc}
}

func (c *interfaceClient) Name(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameRsp, error) {
	out := new(NameRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) IsSupportPersistence(ctx context.Context, in *IsSupportPersistenceReq, opts ...grpc.CallOption) (*IsSupportPersistenceRsp, error) {
	out := new(IsSupportPersistenceRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/IsSupportPersistence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) CustomOptionSchema(ctx context.Context, in *CustomOptionSchemaReq, opts ...grpc.CallOption) (*CustomOptionSchemaRsp, error) {
	out := new(CustomOptionSchemaRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/CustomOptionSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) SetMetadata(ctx context.Context, in *SetMetadataReq, opts ...grpc.CallOption) (*SetMetadataRsp, error) {
	out := new(SetMetadataRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/SetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRsp, error) {
	out := new(CreateRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) CreateByConfig(ctx context.Context, in *CreateByConfigReq, opts ...grpc.CallOption) (*CreateByConfigRsp, error) {
	out := new(CreateByConfigRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/CreateByConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRsp, error) {
	out := new(DeleteRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*GetAllRsp, error) {
	out := new(GetAllRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) UpdateOption(ctx context.Context, in *UpdateOptionReq, opts ...grpc.CallOption) (*UpdateOptionRsp, error) {
	out := new(UpdateOptionRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/UpdateOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) GetStat(ctx context.Context, in *GetStatReq, opts ...grpc.CallOption) (*GetStatRsp, error) {
	out := new(GetStatRsp)
	err := c.cc.Invoke(ctx, "/interface.Interface/GetStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceServer is the server API for Interface service.
// All implementations must embed UnimplementedInterfaceServer
// for forward compatibility
type InterfaceServer interface {
	Name(context.Context, *NameReq) (*NameRsp, error)
	IsSupportPersistence(context.Context, *IsSupportPersistenceReq) (*IsSupportPersistenceRsp, error)
	CustomOptionSchema(context.Context, *CustomOptionSchemaReq) (*CustomOptionSchemaRsp, error)
	SetMetadata(context.Context, *SetMetadataReq) (*SetMetadataRsp, error)
	Create(context.Context, *CreateReq) (*CreateRsp, error)
	CreateByConfig(context.Context, *CreateByConfigReq) (*CreateByConfigRsp, error)
	Get(context.Context, *GetReq) (*GetRsp, error)
	Delete(context.Context, *DeleteReq) (*DeleteRsp, error)
	GetAll(context.Context, *GetAllReq) (*GetAllRsp, error)
	UpdateOption(context.Context, *UpdateOptionReq) (*UpdateOptionRsp, error)
	GetStat(context.Context, *GetStatReq) (*GetStatRsp, error)
	mustEmbedUnimplementedInterfaceServer()
}

// UnimplementedInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceServer struct {
}

func (UnimplementedInterfaceServer) Name(context.Context, *NameReq) (*NameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedInterfaceServer) IsSupportPersistence(context.Context, *IsSupportPersistenceReq) (*IsSupportPersistenceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSupportPersistence not implemented")
}
func (UnimplementedInterfaceServer) CustomOptionSchema(context.Context, *CustomOptionSchemaReq) (*CustomOptionSchemaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomOptionSchema not implemented")
}
func (UnimplementedInterfaceServer) SetMetadata(context.Context, *SetMetadataReq) (*SetMetadataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetadata not implemented")
}
func (UnimplementedInterfaceServer) Create(context.Context, *CreateReq) (*CreateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInterfaceServer) CreateByConfig(context.Context, *CreateByConfigReq) (*CreateByConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByConfig not implemented")
}
func (UnimplementedInterfaceServer) Get(context.Context, *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInterfaceServer) Delete(context.Context, *DeleteReq) (*DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInterfaceServer) GetAll(context.Context, *GetAllReq) (*GetAllRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedInterfaceServer) UpdateOption(context.Context, *UpdateOptionReq) (*UpdateOptionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOption not implemented")
}
func (UnimplementedInterfaceServer) GetStat(context.Context, *GetStatReq) (*GetStatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}
func (UnimplementedInterfaceServer) mustEmbedUnimplementedInterfaceServer() {}

// UnsafeInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceServer will
// result in compilation errors.
type UnsafeInterfaceServer interface {
	mustEmbedUnimplementedInterfaceServer()
}

func RegisterInterfaceServer(s grpc.ServiceRegistrar, srv InterfaceServer) {
	s.RegisterService(&Interface_ServiceDesc, srv)
}

func _Interface_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Name(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_IsSupportPersistence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSupportPersistenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).IsSupportPersistence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/IsSupportPersistence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).IsSupportPersistence(ctx, req.(*IsSupportPersistenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_CustomOptionSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomOptionSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).CustomOptionSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/CustomOptionSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).CustomOptionSchema(ctx, req.(*CustomOptionSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_SetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).SetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/SetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).SetMetadata(ctx, req.(*SetMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_CreateByConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateByConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).CreateByConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/CreateByConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).CreateByConfig(ctx, req.(*CreateByConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).GetAll(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_UpdateOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).UpdateOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/UpdateOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).UpdateOption(ctx, req.(*UpdateOptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.Interface/GetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).GetStat(ctx, req.(*GetStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Interface_ServiceDesc is the grpc.ServiceDesc for Interface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interface.Interface",
	HandlerType: (*InterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _Interface_Name_Handler,
		},
		{
			MethodName: "IsSupportPersistence",
			Handler:    _Interface_IsSupportPersistence_Handler,
		},
		{
			MethodName: "CustomOptionSchema",
			Handler:    _Interface_CustomOptionSchema_Handler,
		},
		{
			MethodName: "SetMetadata",
			Handler:    _Interface_SetMetadata_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Interface_Create_Handler,
		},
		{
			MethodName: "CreateByConfig",
			Handler:    _Interface_CreateByConfig_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Interface_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Interface_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Interface_GetAll_Handler,
		},
		{
			MethodName: "UpdateOption",
			Handler:    _Interface_UpdateOption_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _Interface_GetStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple-interface/interface.proto",
}
