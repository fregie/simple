// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleAPIClient is the client API for SimpleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleAPIClient interface {
	CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionRsp, error)
	GetAllSessions(ctx context.Context, in *GetAllSessionsReq, opts ...grpc.CallOption) (*GetAllSessionsRsp, error)
	GetSession(ctx context.Context, in *GetSessionReq, opts ...grpc.CallOption) (*GetSessionRsp, error)
	DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionRsp, error)
	GetProtos(ctx context.Context, in *GetProtosReq, opts ...grpc.CallOption) (*GetProtosRsp, error)
}

type simpleAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleAPIClient(cc grpc.ClientConnInterface) SimpleAPIClient {
	return &simpleAPIClient{cc}
}

func (c *simpleAPIClient) CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionRsp, error) {
	out := new(CreateSessionRsp)
	err := c.cc.Invoke(ctx, "/simple.SimpleAPI/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleAPIClient) GetAllSessions(ctx context.Context, in *GetAllSessionsReq, opts ...grpc.CallOption) (*GetAllSessionsRsp, error) {
	out := new(GetAllSessionsRsp)
	err := c.cc.Invoke(ctx, "/simple.SimpleAPI/GetAllSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleAPIClient) GetSession(ctx context.Context, in *GetSessionReq, opts ...grpc.CallOption) (*GetSessionRsp, error) {
	out := new(GetSessionRsp)
	err := c.cc.Invoke(ctx, "/simple.SimpleAPI/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleAPIClient) DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionRsp, error) {
	out := new(DeleteSessionRsp)
	err := c.cc.Invoke(ctx, "/simple.SimpleAPI/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleAPIClient) GetProtos(ctx context.Context, in *GetProtosReq, opts ...grpc.CallOption) (*GetProtosRsp, error) {
	out := new(GetProtosRsp)
	err := c.cc.Invoke(ctx, "/simple.SimpleAPI/GetProtos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleAPIServer is the server API for SimpleAPI service.
// All implementations must embed UnimplementedSimpleAPIServer
// for forward compatibility
type SimpleAPIServer interface {
	CreateSession(context.Context, *CreateSessionReq) (*CreateSessionRsp, error)
	GetAllSessions(context.Context, *GetAllSessionsReq) (*GetAllSessionsRsp, error)
	GetSession(context.Context, *GetSessionReq) (*GetSessionRsp, error)
	DeleteSession(context.Context, *DeleteSessionReq) (*DeleteSessionRsp, error)
	GetProtos(context.Context, *GetProtosReq) (*GetProtosRsp, error)
	mustEmbedUnimplementedSimpleAPIServer()
}

// UnimplementedSimpleAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleAPIServer struct {
}

func (UnimplementedSimpleAPIServer) CreateSession(context.Context, *CreateSessionReq) (*CreateSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSimpleAPIServer) GetAllSessions(context.Context, *GetAllSessionsReq) (*GetAllSessionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSessions not implemented")
}
func (UnimplementedSimpleAPIServer) GetSession(context.Context, *GetSessionReq) (*GetSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSimpleAPIServer) DeleteSession(context.Context, *DeleteSessionReq) (*DeleteSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedSimpleAPIServer) GetProtos(context.Context, *GetProtosReq) (*GetProtosRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtos not implemented")
}
func (UnimplementedSimpleAPIServer) mustEmbedUnimplementedSimpleAPIServer() {}

// UnsafeSimpleAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleAPIServer will
// result in compilation errors.
type UnsafeSimpleAPIServer interface {
	mustEmbedUnimplementedSimpleAPIServer()
}

func RegisterSimpleAPIServer(s grpc.ServiceRegistrar, srv SimpleAPIServer) {
	s.RegisterService(&SimpleAPI_ServiceDesc, srv)
}

func _SimpleAPI_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleAPIServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.SimpleAPI/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleAPIServer).CreateSession(ctx, req.(*CreateSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleAPI_GetAllSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleAPIServer).GetAllSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.SimpleAPI/GetAllSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleAPIServer).GetAllSessions(ctx, req.(*GetAllSessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleAPI_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleAPIServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.SimpleAPI/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleAPIServer).GetSession(ctx, req.(*GetSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleAPI_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleAPIServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.SimpleAPI/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleAPIServer).DeleteSession(ctx, req.(*DeleteSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleAPI_GetProtos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleAPIServer).GetProtos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.SimpleAPI/GetProtos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleAPIServer).GetProtos(ctx, req.(*GetProtosReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleAPI_ServiceDesc is the grpc.ServiceDesc for SimpleAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple.SimpleAPI",
	HandlerType: (*SimpleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SimpleAPI_CreateSession_Handler,
		},
		{
			MethodName: "GetAllSessions",
			Handler:    _SimpleAPI_GetAllSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _SimpleAPI_GetSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SimpleAPI_DeleteSession_Handler,
		},
		{
			MethodName: "GetProtos",
			Handler:    _SimpleAPI_GetProtos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
