syntax = "proto3";
package interface;
option go_package = "github.com/fregie/simple/proto/gen/go/simple-interface;simple_interface";

service Interface {
  rpc Name(NameReq) returns (NameRsp) {}
  rpc IsSupportPersistence(IsSupportPersistenceReq) returns(IsSupportPersistenceRsp) {}
  rpc CustomOptionSchema(CustomOptionSchemaReq) returns(CustomOptionSchemaRsp){}
  rpc SetMetadata(SetMetadataReq) returns (SetMetadataRsp) {}
  rpc Create(CreateReq) returns(CreateRsp) {}
  rpc CreateByConfig(CreateByConfigReq) returns(CreateByConfigRsp) {}
  rpc Get(GetReq) returns(GetRsp) {}
  rpc Delete(DeleteReq) returns(DeleteRsp) {}
  rpc GetAll(GetAllReq) returns(GetAllRsp) {}
  rpc UpdateOption(UpdateOptionReq) returns(UpdateOptionRsp) {}
  rpc GetStat(GetStatReq) returns (GetStatRsp) {}
}

message NameReq {}
message NameRsp {
  string Name = 1;
}

message IsSupportPersistenceReq {}
message IsSupportPersistenceRsp {
  bool IsSupport = 1;
}

enum Type {
  String = 0;
  Number = 1;
  Bool = 2;
  StringArray = 3;
}

message Field {
  string Name = 1;
  Type Type = 2;
  repeated string optional = 3;
}

message CustomOptionSchemaReq {}
message CustomOptionSchemaRsp {
  repeated Field Fields = 1;
}

message SetMetadataReq {
  string IP = 1;
  string Domain = 2;
}
message SetMetadataRsp {}

message Option {
  uint64 SendRateLimit = 1;
  uint64 RecvRateLimit = 2;
}

enum ConfigType {
  JSON = 0;
  YAML = 1;
  URL = 2;
  TEXT = 3;
}

message Config {
  string Name = 1;
  ConfigType ConfigType = 2;
  bytes Config = 3;
}

message CreateReq {
  Option Opt = 1;
  ConfigType ConfigType = 2;
  string CustomOption = 3; // in json
}
message CreateRsp {
  Code Code = 1;
  string Msg = 2;
  string Index = 3;
  Config Config = 4;
}

message CreateByConfigReq {
  string Index = 1;
  Config Config = 2;
  Option Opt = 3;
  string CustomOption = 4; // in json
}
message CreateByConfigRsp {
  Code Code = 1;
  string Msg = 2;
}


message GetReq {
  string Index = 1;
  ConfigType ConfigType = 2;
}
message GetRsp {
  Code Code = 1;
  string Msg = 2;
  string Index = 3;
  Config Config = 4;
}

message DeleteReq {
  string Index = 1;
}
message DeleteRsp {
  Code Code = 1;
  string Msg = 2;
}

message GetAllReq {
  ConfigType ConfigType = 1;
}
message GetAllRsp {
  Code Code = 1;
  string Msg = 2;
  map<string, Config> All = 3; // Index, Config
}

message UpdateOptionReq {
  string Index = 1;
  Option Opt = 2;
}
message UpdateOptionRsp {
  Code Code = 1;
  string Msg = 2;
}

message Stat {
  uint64 SendTraffic = 1;
  uint64 RecvTraffic = 2;
}

message GetStatReq {
  string Index = 1;
}
message GetStatRsp {
  Code Code = 1;
  string Msg = 2;
  Stat Stat = 3;
}


enum Code {
  OK = 0;                  // 请求成功
  NotFound = 10404;
  Fail = 10500; 
}